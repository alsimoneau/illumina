# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from subprocess import call
import yaml
import sys, os, shutil
from threading import Thread
from datetime import datetime
import time
import numpy as np
import csv
import shutil
import glob
import zipfile

#global variables
switch1 = 0
perc = []
tech = []
ulor = []
inventory_line = []
atm_type = ""
num_batch = 0
pathparent = os.getcwd()
jobs = 5*2 #5 capes i 2 bandwidth

class Ui_ILLUMINA(object):
    def setupUi(self, ILLUMINA):
        ILLUMINA.setObjectName("ILLUMINA")
        ILLUMINA.setEnabled(True)
        ILLUMINA.resize(764, 889)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(ILLUMINA.sizePolicy().hasHeightForWidth())
        ILLUMINA.setSizePolicy(sizePolicy)
        ILLUMINA.setMinimumSize(QtCore.QSize(764, 889))
        ILLUMINA.setMaximumSize(QtCore.QSize(764, 889))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        ILLUMINA.setFont(font)
        self.groupBox = QtWidgets.QGroupBox(ILLUMINA)
        self.groupBox.setGeometry(QtCore.QRect(10, 260, 731, 121))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.comboBox_atm = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_atm.setGeometry(QtCore.QRect(90, 30, 161, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.comboBox_atm.setFont(font)
        self.comboBox_atm.setObjectName("comboBox_atm")
        self.comboBox_atm.addItem("")
        self.comboBox_atm.addItem("")
        self.comboBox_atm.addItem("")
        self.comboBox_atm.addItem("")
        self.comboBox_atm.addItem("")
        self.comboBox_atm.addItem("")
        self.comboBox_atm.addItem("")
        self.label_13 = QtWidgets.QLabel(self.groupBox)
        self.label_13.setGeometry(QtCore.QRect(20, 30, 71, 21))
        self.label_13.setMaximumSize(QtCore.QSize(71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.groupBox)
        self.label_14.setGeometry(QtCore.QRect(20, 70, 71, 21))
        self.label_14.setMaximumSize(QtCore.QSize(71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.comboBox_rh = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_rh.setGeometry(QtCore.QRect(90, 70, 161, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.comboBox_rh.setFont(font)
        self.comboBox_rh.setObjectName("comboBox_rh")
        self.comboBox_rh.addItem("")
        self.comboBox_rh.addItem("")
        self.comboBox_rh.addItem("")
        self.comboBox_rh.addItem("")
        self.comboBox_rh.addItem("")
        self.comboBox_rh.addItem("")
        self.comboBox_rh.addItem("")
        self.comboBox_rh.addItem("")
        self.label_19 = QtWidgets.QLabel(self.groupBox)
        self.label_19.setGeometry(QtCore.QRect(460, 30, 71, 21))
        self.label_19.setMaximumSize(QtCore.QSize(71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.box_aod = QtWidgets.QLineEdit(self.groupBox)
        self.box_aod.setGeometry(QtCore.QRect(570, 30, 71, 27))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.box_aod.setFont(font)
        self.box_aod.setText("")
        self.box_aod.setReadOnly(False)
        self.box_aod.setObjectName("box_aod")
        self.label_20 = QtWidgets.QLabel(self.groupBox)
        self.label_20.setGeometry(QtCore.QRect(300, 70, 71, 21))
        self.label_20.setMaximumSize(QtCore.QSize(71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.box_alpha = QtWidgets.QLineEdit(self.groupBox)
        self.box_alpha.setGeometry(QtCore.QRect(360, 70, 71, 27))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.box_alpha.setFont(font)
        self.box_alpha.setText("")
        self.box_alpha.setReadOnly(False)
        self.box_alpha.setObjectName("box_alpha")
        self.box_aeh = QtWidgets.QLineEdit(self.groupBox)
        self.box_aeh.setGeometry(QtCore.QRect(570, 70, 71, 27))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.box_aeh.setFont(font)
        self.box_aeh.setText("")
        self.box_aeh.setReadOnly(False)
        self.box_aeh.setObjectName("box_aeh")
        self.label_21 = QtWidgets.QLabel(self.groupBox)
        self.label_21.setGeometry(QtCore.QRect(460, 70, 121, 21))
        self.label_21.setMaximumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.aerosol_opac_button = QtWidgets.QPushButton(self.groupBox)
        self.aerosol_opac_button.setGeometry(QtCore.QRect(300, 30, 131, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.aerosol_opac_button.setFont(font)
        self.aerosol_opac_button.setObjectName("aerosol_opac_button")
        self.groupBox_3 = QtWidgets.QGroupBox(ILLUMINA)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 160, 731, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4.setGeometry(QtCore.QRect(200, 30, 111, 21))
        self.label_4.setMaximumSize(QtCore.QSize(111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(30, 30, 71, 21))
        self.label_5.setMaximumSize(QtCore.QSize(71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.box_band = QtWidgets.QLineEdit(self.groupBox_3)
        self.box_band.setGeometry(QtCore.QRect(260, 30, 71, 27))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.box_band.setFont(font)
        self.box_band.setReadOnly(True)
        self.box_band.setObjectName("box_band")
        self.box_direction = QtWidgets.QLineEdit(self.groupBox_3)
        self.box_direction.setGeometry(QtCore.QRect(90, 30, 71, 27))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.box_direction.setFont(font)
        self.box_direction.setReadOnly(True)
        self.box_direction.setObjectName("box_direction")
        self.natural_light = QtWidgets.QCheckBox(self.groupBox_3)
        self.natural_light.setGeometry(QtCore.QRect(420, 30, 131, 23))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.natural_light.setFont(font)
        self.natural_light.setObjectName("natural_light")
        self.label_22 = QtWidgets.QLabel(self.groupBox_3)
        self.label_22.setGeometry(QtCore.QRect(540, 30, 111, 21))
        self.label_22.setMaximumSize(QtCore.QSize(111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.groupBox_6 = QtWidgets.QGroupBox(ILLUMINA)
        self.groupBox_6.setGeometry(QtCore.QRect(10, 520, 731, 101))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setObjectName("groupBox_6")
        self.hlamp_edit = QtWidgets.QLineEdit(self.groupBox_6)
        self.hlamp_edit.setGeometry(QtCore.QRect(190, 30, 71, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.hlamp_edit.setFont(font)
        self.hlamp_edit.setObjectName("hlamp_edit")
        self.label_7 = QtWidgets.QLabel(self.groupBox_6)
        self.label_7.setGeometry(QtCore.QRect(10, 32, 171, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setMaximumSize(QtCore.QSize(200, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.dobs_edit = QtWidgets.QLineEdit(self.groupBox_6)
        self.dobs_edit.setGeometry(QtCore.QRect(580, 28, 71, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.dobs_edit.setFont(font)
        self.dobs_edit.setObjectName("dobs_edit")
        self.label_8 = QtWidgets.QLabel(self.groupBox_6)
        self.label_8.setGeometry(QtCore.QRect(400, 32, 171, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setMaximumSize(QtCore.QSize(200, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_18 = QtWidgets.QLabel(self.groupBox_6)
        self.label_18.setGeometry(QtCore.QRect(400, 64, 171, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_18.sizePolicy().hasHeightForWidth())
        self.label_18.setSizePolicy(sizePolicy)
        self.label_18.setMaximumSize(QtCore.QSize(200, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.hobs_edit = QtWidgets.QLineEdit(self.groupBox_6)
        self.hobs_edit.setGeometry(QtCore.QRect(580, 60, 71, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.hobs_edit.setFont(font)
        self.hobs_edit.setObjectName("hobs_edit")
        self.obstacles_checkbox = QtWidgets.QCheckBox(self.groupBox_6)
        self.obstacles_checkbox.setGeometry(QtCore.QRect(280, 32, 101, 23))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.obstacles_checkbox.setFont(font)
        self.obstacles_checkbox.setObjectName("obstacles_checkbox")
        self.exp_def_button = QtWidgets.QPushButton(ILLUMINA)
        self.exp_def_button.setGeometry(QtCore.QRect(160, 640, 141, 25))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.exp_def_button.setFont(font)
        self.exp_def_button.setObjectName("exp_def_button")
        self.Run_simulation = QtWidgets.QPushButton(ILLUMINA)
        self.Run_simulation.setGeometry(QtCore.QRect(460, 640, 141, 25))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Run_simulation.setFont(font)
        self.Run_simulation.setObjectName("Run_simulation")
        self.groupBox_7 = QtWidgets.QGroupBox(ILLUMINA)
        self.groupBox_7.setGeometry(QtCore.QRect(10, 20, 731, 121))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setObjectName("groupBox_7")
        self.name_edit = QtWidgets.QLineEdit(self.groupBox_7)
        self.name_edit.setGeometry(QtCore.QRect(100, 30, 151, 25))
        self.name_edit.setObjectName("name_edit")
        self.label_11 = QtWidgets.QLabel(self.groupBox_7)
        self.label_11.setGeometry(QtCore.QRect(10, 32, 80, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setMinimumSize(QtCore.QSize(0, 0))
        self.label_11.setMaximumSize(QtCore.QSize(80, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_11.setFont(font)
        self.label_11.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.Canada))
        self.label_11.setObjectName("label_11")
        self.altitude_edit = QtWidgets.QLineEdit(self.groupBox_7)
        self.altitude_edit.setGeometry(QtCore.QRect(380, 70, 71, 25))
        self.altitude_edit.setObjectName("altitude_edit")
        self.label = QtWidgets.QLabel(self.groupBox_7)
        self.label.setGeometry(QtCore.QRect(290, 32, 80, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(0, 0))
        self.label.setMaximumSize(QtCore.QSize(80, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.Canada))
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.groupBox_7)
        self.label_3.setGeometry(QtCore.QRect(10, 72, 111, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMaximumSize(QtCore.QSize(111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.date_edit = QtWidgets.QLineEdit(self.groupBox_7)
        self.date_edit.setGeometry(QtCore.QRect(100, 70, 71, 25))
        self.date_edit.setObjectName("date_edit")
        self.latitude_edit = QtWidgets.QLineEdit(self.groupBox_7)
        self.latitude_edit.setGeometry(QtCore.QRect(380, 30, 71, 25))
        self.latitude_edit.setObjectName("latitude_edit")
        self.longitude_edit = QtWidgets.QLineEdit(self.groupBox_7)
        self.longitude_edit.setGeometry(QtCore.QRect(580, 30, 71, 25))
        self.longitude_edit.setObjectName("longitude_edit")
        self.label_6 = QtWidgets.QLabel(self.groupBox_7)
        self.label_6.setGeometry(QtCore.QRect(250, 72, 150, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setMaximumSize(QtCore.QSize(200, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_2 = QtWidgets.QLabel(self.groupBox_7)
        self.label_2.setGeometry(QtCore.QRect(490, 32, 85, 21))
        self.label_2.setMaximumSize(QtCore.QSize(85, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.log_edit = QtWidgets.QPlainTextEdit(ILLUMINA)
        self.log_edit.setGeometry(QtCore.QRect(10, 670, 741, 161))
        self.log_edit.setObjectName("log_edit")
        self.progressBar = QtWidgets.QProgressBar(ILLUMINA)
        self.progressBar.setGeometry(QtCore.QRect(300, 840, 118, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.groupBox_5 = QtWidgets.QGroupBox(ILLUMINA)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 400, 731, 101))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setObjectName("groupBox_5")
        self.comboBox_ulor = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox_ulor.setGeometry(QtCore.QRect(340, 50, 61, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.comboBox_ulor.setFont(font)
        self.comboBox_ulor.setObjectName("comboBox_ulor")
        self.comboBox_ulor.addItem("")
        self.comboBox_ulor.addItem("")
        self.comboBox_ulor.addItem("")
        self.comboBox_ulor.addItem("")
        self.comboBox_ulor.addItem("")
        self.comboBox_ulor.addItem("")
        self.comboBox_ulor.addItem("")
        self.comboBox_tech = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox_tech.setGeometry(QtCore.QRect(200, 50, 71, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.comboBox_tech.setFont(font)
        self.comboBox_tech.setObjectName("comboBox_tech")
        self.comboBox_tech.addItem("")
        self.comboBox_tech.addItem("")
        self.comboBox_tech.addItem("")
        self.comboBox_tech.addItem("")
        self.comboBox_tech.addItem("")
        self.comboBox_tech.addItem("")
        self.comboBox_tech.addItem("")
        self.label_15 = QtWidgets.QLabel(self.groupBox_5)
        self.label_15.setGeometry(QtCore.QRect(120, 50, 71, 21))
        self.label_15.setMaximumSize(QtCore.QSize(111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.groupBox_5)
        self.label_16.setGeometry(QtCore.QRect(290, 50, 51, 21))
        self.label_16.setMaximumSize(QtCore.QSize(111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.perc_edit = QtWidgets.QLineEdit(self.groupBox_5)
        self.perc_edit.setGeometry(QtCore.QRect(50, 50, 61, 25))
        self.perc_edit.setObjectName("perc_edit")
        self.label_17 = QtWidgets.QLabel(self.groupBox_5)
        self.label_17.setGeometry(QtCore.QRect(30, 50, 31, 21))
        self.label_17.setMaximumSize(QtCore.QSize(111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.add_tech_btn = QtWidgets.QPushButton(self.groupBox_5)
        self.add_tech_btn.setGeometry(QtCore.QRect(430, 50, 131, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.add_tech_btn.setFont(font)
        self.add_tech_btn.setObjectName("add_tech_btn")
        self.clean_ls_btn = QtWidgets.QPushButton(self.groupBox_5)
        self.clean_ls_btn.setGeometry(QtCore.QRect(580, 50, 89, 25))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.clean_ls_btn.setFont(font)
        self.clean_ls_btn.setObjectName("clean_ls_btn")
        self.groupBox_7.raise_()
        self.groupBox.raise_()
        self.groupBox_3.raise_()
        self.groupBox_6.raise_()
        self.exp_def_button.raise_()
        self.Run_simulation.raise_()
        self.log_edit.raise_()
        self.progressBar.raise_()
        self.groupBox_5.raise_()

        self.retranslateUi(ILLUMINA)
        QtCore.QMetaObject.connectSlotsByName(ILLUMINA)

        self.exp_def_button.clicked.connect(self.defining_exp)
        self.add_tech_btn.clicked.connect(self.defining_combo)
        self.clean_ls_btn.clicked.connect(self.clean_ls)
        self.aerosol_opac_button.clicked.connect(self.opac_aod)
        self.Run_simulation.clicked.connect(self.run_simulation)

    def retranslateUi(self, ILLUMINA):
        _translate = QtCore.QCoreApplication.translate
        ILLUMINA.setWindowTitle(_translate("ILLUMINA", "ILLUMINA LIGHT"))
        self.groupBox.setTitle(_translate("ILLUMINA", "3. Atmosphere"))
        self.comboBox_atm.setItemText(0, _translate("ILLUMINA", "CC Continental clean"))
        self.comboBox_atm.setItemText(1, _translate("ILLUMINA", "CA Continental average"))
        self.comboBox_atm.setItemText(2, _translate("ILLUMINA", "CP Continental polluted"))
        self.comboBox_atm.setItemText(3, _translate("ILLUMINA", "MP Maritime polluted"))
        self.comboBox_atm.setItemText(4, _translate("ILLUMINA", "MC Maritime clean"))
        self.comboBox_atm.setItemText(5, _translate("ILLUMINA", "U Urban"))
        self.comboBox_atm.setItemText(6, _translate("ILLUMINA", "D Desert"))
        self.label_13.setText(_translate("ILLUMINA", "Aerosols"))
        self.label_14.setText(_translate("ILLUMINA", "Humidity"))
        self.comboBox_rh.setItemText(0, _translate("ILLUMINA", "0"))
        self.comboBox_rh.setItemText(1, _translate("ILLUMINA", "50"))
        self.comboBox_rh.setItemText(2, _translate("ILLUMINA", "70"))
        self.comboBox_rh.setItemText(3, _translate("ILLUMINA", "80"))
        self.comboBox_rh.setItemText(4, _translate("ILLUMINA", "90"))
        self.comboBox_rh.setItemText(5, _translate("ILLUMINA", "95"))
        self.comboBox_rh.setItemText(6, _translate("ILLUMINA", "98"))
        self.comboBox_rh.setItemText(7, _translate("ILLUMINA", "99"))
        self.label_19.setText(_translate("ILLUMINA", "AOD"))
        self.label_20.setText(_translate("ILLUMINA", "Alpha"))
        self.label_21.setText(_translate("ILLUMINA", "Aerosol Height (m)"))
        self.aerosol_opac_button.setText(_translate("ILLUMINA", "Std values (OPAC)"))
        self.groupBox_3.setTitle(_translate("ILLUMINA", "2. Experiment"))
        self.label_4.setText(_translate("ILLUMINA", "Band"))
        self.label_5.setText(_translate("ILLUMINA", "Direction"))
        self.box_band.setText(_translate("ILLUMINA", "V (J-C)"))
        self.box_direction.setText(_translate("ILLUMINA", "Zenith"))
        self.natural_light.setText(_translate("ILLUMINA", "Add natural light"))
        self.label_22.setText(_translate("ILLUMINA", "(GAMBONS)"))
        self.groupBox_6.setTitle(_translate("ILLUMINA", "5. Architectural features around light sources"))
        self.hlamp_edit.setText(_translate("ILLUMINA", "0"))
        self.label_7.setText(_translate("ILLUMINA", "Mean heigh of all the lamps (m)"))
        self.dobs_edit.setText(_translate("ILLUMINA", "0"))
        self.label_8.setText(_translate("ILLUMINA", "Mean street width (m)"))
        self.label_18.setText(_translate("ILLUMINA", "Mean building story number"))
        self.hobs_edit.setText(_translate("ILLUMINA", "0"))
        self.obstacles_checkbox.setText(_translate("ILLUMINA", "No obstacles"))
        self.exp_def_button.setText(_translate("ILLUMINA", "6. Define simulation"))
        self.Run_simulation.setText(_translate("ILLUMINA", "7. Run Simulation"))
        self.groupBox_7.setTitle(_translate("ILLUMINA", "1. Location"))
        self.label_11.setText(_translate("ILLUMINA", "Name"))
        self.label.setText(_translate("ILLUMINA", "Latitude (deg)"))
        self.label_3.setText(_translate("ILLUMINA", "Date (dd/mm)"))
        self.label_6.setText(_translate("ILLUMINA", "Altitude (m) (0=ground)"))
        self.label_2.setText(_translate("ILLUMINA", "Longitude (deg)"))
        self.groupBox_5.setTitle(_translate("ILLUMINA", "4. Light source"))
        self.comboBox_ulor.setItemText(0, _translate("ILLUMINA", "0"))
        self.comboBox_ulor.setItemText(1, _translate("ILLUMINA", "1"))
        self.comboBox_ulor.setItemText(2, _translate("ILLUMINA", "5"))
        self.comboBox_ulor.setItemText(3, _translate("ILLUMINA", "10"))
        self.comboBox_ulor.setItemText(4, _translate("ILLUMINA", "15"))
        self.comboBox_ulor.setItemText(5, _translate("ILLUMINA", "20"))
        self.comboBox_ulor.setItemText(6, _translate("ILLUMINA", "50"))
        self.comboBox_tech.setItemText(0, _translate("ILLUMINA", "HPS"))
        self.comboBox_tech.setItemText(1, _translate("ILLUMINA", "3LED"))
        self.comboBox_tech.setItemText(2, _translate("ILLUMINA", "4LED"))
        self.comboBox_tech.setItemText(3, _translate("ILLUMINA", "PCAMBR"))
        self.comboBox_tech.setItemText(4, _translate("ILLUMINA", "MV"))
        self.comboBox_tech.setItemText(5, _translate("ILLUMINA", "CFL"))
        self.comboBox_tech.setItemText(6, _translate("ILLUMINA", "MH"))
        self.label_15.setText(_translate("ILLUMINA", "Technology"))
        self.label_16.setText(_translate("ILLUMINA", "ULOR"))
        self.label_17.setText(_translate("ILLUMINA", "%"))
        self.add_tech_btn.setText(_translate("ILLUMINA", "Add light fixture"))
        self.clean_ls_btn.setText(_translate("ILLUMINA", "Clean all"))


    def defining_exp(self):
        self.log_edit.setPlainText('Defining experiment')
        self.log_edit.repaint()
        global num_batch
        global perc
        global tech
        global ulor
        global inventory_line
        global atm_type
        global path_parent
        global jobs

        lat = self.latitude_edit.text()
        long = self.longitude_edit.text()
        name = self.name_edit.text()
        alt = self.altitude_edit.text()
        radius = str(70)
        if self.obstacles_checkbox.isChecked():
            fobs = str(0)
            self.dobs_edit.setText('-')
            self.hobs_edit.setText('-')
            self.dobs_edit.setReadOnly(True)
            self.hobs_edit.setReadOnly(True)
            dobs = str(10)
            hobs = str(10)            
        else:
            fobs = str(0.8)
            dobs = self.dobs_edit.text()
            hobs = self.hobs_edit.text()
        hlamp = self.hlamp_edit.text()

        ##creating inventory
        a1 = lat + '\t' + long + '\t' + radius + '\t' + hobs + '\t' + dobs + '\t' + fobs + '\t' + hlamp + '\t'
        a = []
        for i in range(len(perc)):
            if i == len(perc) - 1:
                a.append(perc[i] + '_' + tech[i] + '_' + ulor[i] + '\n')
            else:
                a.append(perc[i] + '_' + tech[i] + '_' + ulor[i] + ' ')
        a2 = ""
        for combo in a:
            a2 += str(combo)
        inventory_line.append(a1 + a2)

        
        cpus = os.cpu_count()
        if cpus==None:
            cpus=2
        if jobs//cpus==0: #if there are more cpus than jobs
            jobs_batch=str(1)
            num_batch=jobs
        else: #if there are more jobs than cpus
            if jobs%cpus==0: #if it is divisible 
                jobs_batch=str(jobs//cpus)
                num_batch=cpus
            else:
                jobs_batch=str(1+jobs//cpus)
                if jobs%int(jobs_batch)==0:
                    num_batch=(jobs//int(jobs_batch))
                else:
                    num_batch=1+(jobs//int(jobs_batch))
        
        date = self.date_edit.text()
        date_day = date.split('/')[0]
        date_month = date.split('/')[1]
        #date_year = date.split('/')[2]

        array_months=['January','February','March','April','May','June','July','August','September','October','November','December']
        name_month=array_months[int(date_month)-1]

        ##managing viirs file
        files = glob.glob('./VIIRS-DNB/*')
        for f in files:
            os.remove(f)
        name_viirs=glob.glob('VIIRS_database/SVDNB_npp_2020'+date_month+'*')
        
        shutil.copyfile(name_viirs[0],'VIIRS-DNB/'+name_viirs[0].split('/')[1])
        
        ##managing srtm files
        files = glob.glob('./SRTM/*')
        for f in files:
            os.remove(f)

        with zipfile.ZipFile('SRTM.zip', 'r') as zipObj:
            zipObj.extractall('SRTM')  
              
        with open('domain_params.in', 'w') as f:
            f.write('latitude: ' + lat + '\n')
            f.write('longitude: ' + long + '\n')
            f.write('srs: auto\n')
            f.write('scale_factor: 1.666666\n')
            f.write('nb_pixels: 17\n') #10
            f.write('nb_layers: 5\n')
            f.write('scale_min: 750\n')
            f.write('buffer: 10')
        #global inventory_line
        if os.path.isfile('inventory.txt'):
            os.remove('inventory.txt')
        with open('inventory.txt', 'w') as f:
            for line in inventory_line:
                f.write(line)
        inventory_line = []
        self.progressBar.setValue(10)
        call(["illum","domain"])
        self.progressBar.setValue(25)
        self.log_edit.setPlainText('The VIIRS montly composite image of '+name_month+' of 2020 will be used as input for the radiance emitted by light sources')
        self.log_edit.repaint()
        call(["illum","warp"])
        self.progressBar.setValue(50)

        ##Remove SRTM files to free memory
        files = glob.glob('./SRTM/*')
        for f in files:
            os.remove(f)
        
        atm_type = self.comboBox_atm.currentText()
        RH = self.comboBox_rh.currentText()

        aod = self.box_aod.text()
        ac = self.box_alpha.text()
        aeh = self.box_aeh.text()
        
        with open('inputs_params_original.in', 'r') as f:
            lines = f.readlines()
        if os.path.isfile('inputs_params.in'):
            os.remove('inputs_params.in')

        with open('inputs_params.in', 'w') as f:
            for line in lines:
                if line[:15] == 'aerosol_profile':
                    f.write('aerosol_profile: ' + atm_type.split(' ')[0] + '\n')
                elif line[:18] == 'observer_elevation':
                    f.write('observer_elevation: ' + alt + '\n')
                elif line[:17] == 'relative_humidity':
                    f.write('relative_humidity: '+RH+'\n')
                elif line[:21] == 'aerosol_optical_depth':
                    f.write('aerosol_optical_depth: '+str(aod)+'\n')
                elif line[:20] == 'angstrom_coefficient':
                    f.write('angstrom_coefficient: '+str(ac)+'\n')
                elif line[:14] == 'aerosol_height':
                    f.write('aerosol_height: '+str(aeh)+'\n')
                elif line[:8] == 'exp_name':
                    f.write('exp_name: '+str(self.name_edit.text())+'_'+date_day+'_'+date_month+'\n')
                else:
                    f.write(line)
        
        call(["illum","inputs"])
        self.progressBar.setValue(80)
        
        pathinputs= "./Inputs"
        os.chdir(pathinputs)
        call(["illum","batches","-N",jobs_batch])
        self.progressBar.setValue(100)
        log_1='Experiment defined\n'
        log_2='Simulation of the diffuse radiance in zenith direction for the V band\n'
        log_3='Lat: '+str(lat)+' Long: '+str(long)+' Altitude relative to ground: '+str(alt)+'m'+' Date: '+date_month+'/2021\n'
        if self.obstacles_checkbox.isChecked():
            log_4='Heigh of the lamps: '+hlamp+' No obstacles\n'
        else:
            log_4='Heigh of the lamps: '+hlamp+' Obstacle heigh: '+hobs+' Distance between lamps and obstacles: '+dobs+'\n'
        log_5='Inventory of light sources:\n'
        log_6=''
        perc2=perc
        total=0
        for element in perc:
           if isinstance(element, float) or element.isdigit():
              total += float(element)
        for i in range(0,len(perc)):
            perc2[i]=str(round(100*float(perc[i])/total,2))
            log_6=log_6+perc2[i]+'% '+tech[i]+' Ulor:'+ulor[i]+'\n'
        log=log_1+log_2+log_3+log_4+log_5+log_6
        self.log_edit.setPlainText(log)
        self.progressBar.setValue(0)
        
    def run_simulation(self):
        global num_batch
        global pathparent
        global jobs
        global perc
        global tech
        global ulor
        
        self.log_edit.setPlainText('Running the simulation\nIt might take several minutes')
        self.log_edit.repaint()
        def calling_threads(number):
            call(["bash","batch_"+number])
        threads = []
        for i in range(num_batch):
            x=Thread(target=calling_threads,args=(str(i+1)))
            x.start()
            threads.append(x)
    
        job_cont=0
        self.progressBar.setValue(1)
        wavel=np.loadtxt('wav.lst')#['507.25','545.75','584.25','622.75']
        layer=['0','1','2','3','4']
        while job_cont<jobs:
            for wl in wavel:
                for ly in layer:
                    time.sleep(0.5)
                    path='./exec/elevation_angle_90/azimuth_angle_0/wavelength_'+str(wl)+'/layer_'+ly
                    if os.path.isfile(path+'/finished.txt') == True:
                        job_cont+=1
                        os.remove(path+'/finished.txt')
                        self.progressBar.setValue(-5+((100*job_cont)//jobs))
        for t in threads:
            t.join()
           
        ##GAMBONS
        mag_ref=21.93
        radiance_ref=2.22e-7
        os.chdir(pathparent)
        if self.natural_light.isChecked():
            self.progressBar.setValue(0)
            self.log_edit.setPlainText('Computing natural brightness')
            import gambons_inputs
            pathgambons= "./GambonsV2"
            os.chdir(pathgambons)
            output_path = './output'
            for f in os.listdir(output_path):
                os.remove(os.path.join(output_path, f))
            call(["java", "-jar", "Gambons.jar", "-cf", pathparent+"/illum_conf.xml"])
            csv_file = [f for f in os.listdir(output_path) if f.endswith('.csv')]
            with open(os.path.join(output_path,csv_file[0])) as f:
                csvreader = csv.reader(f)
                header = next(csvreader)
                rows = []
                radiance_V_nat = []
                for row in csvreader:
                    rows.append(row)
                    if float(rows[-1][1])==0.2500:
                        radiance_V_nat.append(float((rows[-1][2])))
            mag_V_nat = mag_ref-2.5*np.log10(np.mean(radiance_V_nat)/radiance_ref)
        self.progressBar.setValue(100)

        ##extracting results
        self.log_edit.setPlainText('Simulation finished\nExtracting results')
        self.log_edit.repaint()
        os.chdir(pathparent)
        with open("results_artificial_temp.txt","w") as f:
            call(["illum","extract"],stdout=f)

        with open('results_artificial_temp.txt') as f:
            lines=f.readlines()
        os.remove('results_artificial_temp.txt')
        radiance=[]
        central_wl=[]
        
        for line in lines:
            radiance.append(float(line.split()[1]))
            central_wl.append(float((line.split()[0]).split('_')[-1]))
        wl, sens=np.loadtxt("Lights/JC_V.dat",skiprows=1).T
        index_min=np.where(wl==470)
        index_max=np.where(wl==740.5)
        wl_filt =wl[index_min[0][0]:index_max[0][0]]
        sens_filt=(sens[index_min[0][0]:index_max[0][0]])/100 #sensitivity in file is as %

        bins = np.loadtxt("spectral_bands.dat", delimiter=",")
        n_bins = bins.shape[0]
        limits=np.zeros(n_bins+1)
        for index,value in enumerate(bins):
            limits[index]=value[0]
            if index==n_bins-1:
                limits[index+1]=value[1]
        bool_array = (wl_filt>=limits[:-1,None]) & (wl_filt<limits[1:,None])
        avg_value = [np.mean(sens_filt[mask]) for mask in bool_array]
        radiance_V_art=0
        for i in range(len(limits)-1):
            radiance_V_art+=avg_value[i]*radiance[i]*(limits[i+1]-limits[i])
        
        mag_V_art=mag_ref-2.5*np.log10(radiance_V_art/radiance_ref)
        

        log1='Artificial zenith sky brightness: '+str(round(mag_V_art,2))+' mag/arcsec\n'
        if self.natural_light.isChecked():
            radiance_V_tot=np.mean(radiance_V_nat)+radiance_V_art
            mag_V_tot=mag_ref-2.5*np.log10(radiance_V_tot/radiance_ref)
            log2='Natural zenith sky brightness: '+str(round(mag_V_nat,2))+' mag/arcsec\n'
            log3='Total zenith sky brightness: '+str(round(mag_V_tot,2))+' mag/arcsec\n'
            log1=log1+log2+log3
        else:
            mag_V_nat='Not computed'
            mag_V_tot=mag_V_art
            
        self.log_edit.setPlainText(log1)

        ##Write results file
        log_6=''
        for i in range(0,len(perc)):
            log_6=log_6+perc[i]+'% '+tech[i]+' Ulor:'+ulor[i]+'\n'
    
        dict_file = ('Experiment name: '+self.name_edit.text() +'\n'+
                    'Latitude: '+self.latitude_edit.text()+'\n'+
                    'Longitude: '+self.longitude_edit.text()+'\n'+
                    'Direction: Zenith\n'+
                    'Band: V'+
                    'Date (ddmmyyyy): '+self.date_edit.text()+'\n'+
                    'Inventory: \n'+log_6+
                    'Heigh lamps: '+self.hlamp_edit.text()+'\n'+
                    'Street width: '+self.dobs_edit.text()+'\n'+
                    'Building story number: '+self.hobs_edit.text() +' (m)\n'+
                    'Aerosol type: '+self.comboBox_atm.currentText().split(' ')[0]+'\n'+
                    'Relative humidity: '+self.comboBox_rh.currentText() +'\n'+
                    'Total radiance: '+str(round(mag_V_tot,2))+' mag/arcsec\n'+
                    'Artificial radiance: '+str(round(mag_V_art,2))+' mag/arcsec\n'+
                    'Natural radiance: '+str(round(mag_V_nat,2))+' mag/arcsec\n') 

        ac = self.box_alpha.text()
        aeh = self.box_aeh.text()
        with open('Results_experiment_'+self.name_edit.text()+'.txt', 'w') as file:
            file.write(dict_file)

        
    def defining_combo(self):
        global switch1
        global perc
        global tech
        global ulor
        
        if switch1 == 0:
            perc = []
            tech = []
            ulor = []
        perc.append(self.perc_edit.text())
        tech.append(self.comboBox_tech.currentText())
        ulor.append(self.comboBox_ulor.currentText())
        switch1 = 1
        self.perc_edit.setText('')
        self.comboBox_tech.setCurrentIndex(0)
        self.comboBox_ulor.setCurrentIndex(0)
        message = []
        for i in range(len(perc)):
            message.append('Light fixture added: '+perc[i]+'% '+tech[i]+' with ULOR '+ulor[i]+'%\n')
        message2=''.join(message)
        self.log_edit.setPlainText(message2)
            
    def clean_ls(self):
        global perc
        global tech
        global ulor
        perc = []
        tech = []
        ulor = []
        self.log_edit.setPlainText('')
        
    def opac_aod(self):
        atm_type = self.comboBox_atm.currentText()
        RH = self.comboBox_rh.currentText()
        
        with open('AoD_std_values.txt')as f:
            aod=yaml.safe_load(f)
        with open('AC_std_values.txt')as f:
            ac=yaml.safe_load(f)
        if atm_type.split(' ')[0]=='D':
            aerosol_h=6000
        elif atm_type.split(' ')[0]=='ANT':
            aerosol_h=10000
        else:
            aerosol_h=2000
        
        self.box_aod.setText(str(aod[atm_type.split(' ')[0]+RH])[:5])
        self.box_alpha.setText(str(ac[atm_type.split(' ')[0]+RH])[:5])
        self.box_aeh.setText(str(aerosol_h))
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ILLUMINA = QtWidgets.QWidget()
    ui = Ui_ILLUMINA()
    ui.setupUi(ILLUMINA)
    ILLUMINA.show()
    sys.exit(app.exec_())

